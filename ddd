-- Roblox Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Variables
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local vehicleflyspeed = 1
local iyflyspeed = 1
local FLYING = false

-- Utility function to get the root part of a character
local function getRoot(character)
	return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
end

-- Function to start flying
local function startFlying()
	FLYING = true
	local player = Players.LocalPlayer
	local root = getRoot(player.Character)
	local camera = workspace.CurrentCamera
	local v3none = Vector3.new()
	local v3inf = Vector3.new(9e9, 9e9, 9e9)

	-- Create BodyVelocity and BodyGyro instances
	local bv = Instance.new("BodyVelocity")
	bv.Name = velocityHandlerName
	bv.Parent = root
	bv.MaxForce = v3inf
	bv.Velocity = v3none

	local bg = Instance.new("BodyGyro")
	bg.Name = gyroHandlerName
	bg.Parent = root
	bg.MaxTorque = v3inf
	bg.P = 1000
	bg.D = 50

	-- Flight logic
	local controlModule = require(player.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
	local lastDirection = Vector3.new(0, 0, 0)

	local function updateFlight()
		while FLYING do
			if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
				local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
				local direction = controlModule:GetMoveVector() * (vehicleflyspeed or iyflyspeed) * 50

				if direction.Magnitude > 0 then
					bv.Velocity = direction
					lastDirection = direction
				else
					bv.Velocity = lastDirection
				end

				bg.CFrame = camera.CFrame
				humanoid.PlatformStand = true
			end
			wait()
		end
		-- Cleanup after flying ends
		if root then
			if root:FindFirstChild(velocityHandlerName) then
				root:FindFirstChild(velocityHandlerName):Destroy()
			end
			if root:FindFirstChild(gyroHandlerName) then
				root:FindFirstChild(gyroHandlerName):Destroy()
			end
			if player.Character:FindFirstChildOfClass("Humanoid") then
				player.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
			end
		end
	end

	-- Start the flight update loop
	coroutine.wrap(updateFlight)()
end

-- Function to stop flying
local function stopFlying()
	FLYING = false
end

-- Function to set up the fly button in the GUI
local function setupFlyButton()
	local player = Players.LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")

	-- Check if the GUI already exists
	local existingGui = playerGui:FindFirstChild("FlyButtonGui")
	if existingGui then
		-- If the GUI exists, just return
		return
	end

	-- Create GUI
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "FlyButtonGui"
	screenGui.Parent = playerGui

	local flyButton = Instance.new("TextButton")
	flyButton.Size = UDim2.new(0, 100, 0, 50)
	flyButton.Position = UDim2.new(0, 20, 0, 20)
	flyButton.Text = "Fly"
	flyButton.Parent = screenGui

	local isFlying = false

	flyButton.MouseButton1Click:Connect(function()
		if not isFlying then
			startFlying()
			flyButton.Text = "Stop Flying"
		else
			stopFlying()
			flyButton.Text = "Fly"
		end
		isFlying = not isFlying
	end)
end

-- Execute setup function
setupFlyButton()
