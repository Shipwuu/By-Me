local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local velocityHandlerName = randomString()
local gyroHandlerName = randomString()
local vehicleflyspeed = 1
local iyflyspeed = 1
local FLYING = false

-- Define a function to handle flying
local function unmobilefly(speaker)
	pcall(function()
		FLYING = false
		local root = getRoot(speaker.Character)
		if root then
			local velocityHandler = root:FindFirstChild(velocityHandlerName)
			local gyroHandler = root:FindFirstChild(gyroHandlerName)
			if velocityHandler then velocityHandler:Destroy() end
			if gyroHandler then gyroHandler:Destroy() end
			if speaker.Character:FindFirstChildOfClass("Humanoid") then
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
			end
		end
	end)
end

local function mobilefly(speaker, vfly)
	unmobilefly(speaker)
	FLYING = true

	local root = getRoot(speaker.Character)
	local camera = workspace.CurrentCamera
	local v3none = Vector3.new()
	local v3zero = Vector3.new(0, 0, 0)
	local v3inf = Vector3.new(9e9, 9e9, 9e9)

	local controlModule = require(speaker.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))

	local bv = Instance.new("BodyVelocity")
	bv.Name = velocityHandlerName
	bv.Parent = root
	bv.MaxForce = v3inf
	bv.Velocity = v3none

	local bg = Instance.new("BodyGyro")
	bg.Name = gyroHandlerName
	bg.Parent = root
	bg.MaxTorque = v3inf
	bg.P = 1000
	bg.D = 50

	local function updateFlight()
		while FLYING do
			if speaker.Character and speaker.Character:FindFirstChildOfClass("Humanoid") then
				local humanoid = speaker.Character:FindFirstChildOfClass("Humanoid")
				local VelocityHandler = root:FindFirstChild(velocityHandlerName)
				local GyroHandler = root:FindFirstChild(gyroHandlerName)
				if VelocityHandler and GyroHandler then
					local direction = controlModule:GetMoveVector()
					local speed = vfly and vehicleflyspeed or iyflyspeed
					
					VelocityHandler.MaxForce = v3inf
					GyroHandler.MaxTorque = v3inf
					if not vfly then humanoid.PlatformStand = true end
					
					GyroHandler.CFrame = camera.CFrame
					VelocityHandler.Velocity = v3none

					if direction.X > 0 then
						VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * (speed * 50))
					elseif direction.X < 0 then
						VelocityHandler.Velocity = VelocityHandler.Velocity + camera.CFrame.RightVector * (direction.X * (speed * 50))
					end
					
					if direction.Z > 0 then
						VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * (speed * 50))
					elseif direction.Z < 0 then
						VelocityHandler.Velocity = VelocityHandler.Velocity - camera.CFrame.LookVector * (direction.Z * (speed * 50))
					end
				end
			end
			wait()
		end
		-- Cleanup after flying ends
		if root then
			if root:FindFirstChild(velocityHandlerName) then
				root:FindFirstChild(velocityHandlerName):Destroy()
			end
			if root:FindFirstChild(gyroHandlerName) then
				root:FindFirstChild(gyroHandlerName):Destroy()
			end
			if speaker.Character:FindFirstChildOfClass("Humanoid") then
				speaker.Character:FindFirstChildOfClass("Humanoid").PlatformStand = false
			end
		end
	end

	-- Start the flight update loop
	coroutine.wrap(updateFlight)()
end

-- Toggle flying using a button in the GUI
local function setupFlyButton()
	local player = Players.LocalPlayer
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "FlyButtonGui"
	screenGui.Parent = player:WaitForChild("PlayerGui")

	local flyButton = Instance.new("TextButton")
	flyButton.Size = UDim2.new(0, 100, 0, 50)
	flyButton.Position = UDim2.new(0, 20, 0, 20)
	flyButton.Text = "Fly"
	flyButton.Parent = screenGui

	local isFlying = false

	flyButton.MouseButton1Click:Connect(function()
		if not isFlying then
			mobilefly(player, true)
			flyButton.Text = "Stop Flying"
		else
			NOFLY()
			flyButton.Text = "Fly"
		end
		isFlying = not isFlying
	end)
end

-- Call the setup function when the script runs
setupFlyButton()
